/ Visualizing ldr and ultrasonic sensor values/
#include <WiFi.h>
#include <PubSubClient.h>
int trigpin=5;
int echopin=4;
float distance;
int ldr;
const char* ssid = "Chandana";
const char* password = "*****";
#define ORG "hei5r9"
#define DEVICE_TYPE "ESP32"
#define DEVICE_ID "12345"
#define TOKEN "12345678"
const char publishTopic[] = "iot-2/evt/Data/fmt/json";
char server[] = ORG ".messaging.internetofthings.ibmcloud.com";
char authMethod[] = "use-token-auth";
char token[] = TOKEN;
char clientId[] = "d:" ORG ":" DEVICE_TYPE ":" DEVICE_ID;
WiFiClient wifiClient;
PubSubClient client(server, 1883, wifiClient);
int publishInterval = 5000;
long lastPublishMillis;
void publishData();
void setup() 
{
  Serial.begin(115200);
  pinMode(trigpin,OUTPUT);
  pinMode(echopin,INPUT);
  Serial.println();
  Serial.print("Process Started");
  wifiConnect();
  mqttConnect();
}
void loop() 
{
 if (millis() - lastPublishMillis > publishInterval)
  {
    publishData();
    lastPublishMillis = millis();
  }
  
  if (!client.loop()) 
  {
    mqttConnect();
  }
}

void wifiConnect() 
{
  Serial.print("Connecting"); Serial.print(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) 
  {
    delay(1000);
    Serial.print(".");
  }
  Serial.print("WiFi connected, IP address: "); 
  Serial.println(WiFi.localIP());
}

void mqttConnect() 
{
  if (!client.connected()) 
  {
    Serial.print("Connecting to MQTT Client"); Serial.println(server);
    while (!client.connect(clientId, authMethod, token)) 
    {
      Serial.print(".");
      delay(1000);
    }
   }
}

void publishData() 
{
 digitalWrite(trigpin,HIGH);
 delay(1000);
 digitalWrite(trigpin,LOW);
 int duration=pulseIn(echopin,HIGH);
 distance=duration*0.343/2;
 Serial.println("Distance is:");
 Serial.print(distance);
 Serial.print("cm");
 delay(2000);
 int LDRValue=analogRead(32);
  double dV=LDRValue; 
  Serial.println(LDRValue);
  double le=(dV/4095)*100;
 ldr=le;
  Serial.println("Value of LDR");
  Serial.print(ldr);
  Serial.print("%");
  delay(2000);
  String payload = "{\"d\":{\"distance\":";
  payload += distance;
  payload += ",""\"ldr\":";
  payload += ldr;
  payload += "}}";
  Serial.print("Payload being sent."); 
  Serial.println(payload);
  if (client.publish(publishTopic, (char*) payload.c_str())) 
  {
    Serial.println("Done Publishing.");
  }
  else 
  {
    Serial.println("Failed to publish.");
  }
}



